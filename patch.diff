diff --git a/base/BUILD.gn b/base/BUILD.gn
index 943412f..abbebdb 100644
--- a/base/BUILD.gn
+++ b/base/BUILD.gn
@@ -83,7 +83,8 @@ config("base_flags") {
       # requirement.
       # https://groups.google.com/a/chromium.org/d/topic/chromium-dev/B9Q5KTD7iCo/discussion
       "-Wglobal-constructors",
-      "-Wexit-time-destructors",
+      # @adgraph
+      # "-Wexit-time-destructors",
     ]
   }
 }
diff --git a/build/config/compiler/BUILD.gn b/build/config/compiler/BUILD.gn
index 83337d5..e48266b 100644
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -1642,7 +1642,8 @@ config("no_exceptions") {
 config("wexit_time_destructors") {
   # TODO: Enable on Windows too, http://crbug.com/404525
   if (is_clang && !is_win) {
-    cflags = [ "-Wexit-time-destructors" ]
+    # @adgraph
+    # cflags = [ "-Wexit-time-destructors" ]
   }
 }
 
diff --git a/extensions/renderer/script_context.cc b/extensions/renderer/script_context.cc
index ff759b0..a7a0a11 100644
--- a/extensions/renderer/script_context.cc
+++ b/extensions/renderer/script_context.cc
@@ -2,6 +2,10 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+// @adgraph
+#include <string>
+#include "third_party/blink/renderer/core/dom/document.h"
+
 #include "extensions/renderer/script_context.h"
 
 #include "base/command_line.h"
@@ -476,12 +480,19 @@ v8::Local<v8::Value> ScriptContext::RunScript(
     return v8::Undefined(isolate());
   }
 
+  // @adgraph
+  web_frame_->GetDocument()
+      .DocumentForAdGraph()
+      ->RegisterExtensionScripts(
+        *v8::String::Utf8Value(isolate(), code),
+        script->GetUnboundScript()->GetId()        
+      );
   v8::Local<v8::Value> result;
   if (!script->Run(v8_context()).ToLocal(&result)) {
     exception_handler.Run(try_catch);
     return v8::Undefined(isolate());
   }
-
+  
   return handle_scope.Escape(result);
 }
 
diff --git a/third_party/blink/public/web/web_document.h b/third_party/blink/public/web/web_document.h
index 73ddadc..a0ac54f 100644
--- a/third_party/blink/public/web/web_document.h
+++ b/third_party/blink/public/web/web_document.h
@@ -71,6 +71,8 @@ class WebDocument : public WebNode {
   }
   void Assign(const WebDocument& e) { WebNode::Assign(e); }
 
+  BLINK_EXPORT Document* DocumentForAdGraph();
+
   BLINK_EXPORT WebURL Url() const;
   // Note: Security checks should use the getSecurityOrigin(), not url().
   BLINK_EXPORT WebSecurityOrigin GetSecurityOrigin() const;
diff --git a/third_party/blink/renderer/bindings/core/v8/script_controller.cc b/third_party/blink/renderer/bindings/core/v8/script_controller.cc
index d9b8da2d..b728012 100644
--- a/third_party/blink/renderer/bindings/core/v8/script_controller.cc
+++ b/third_party/blink/renderer/bindings/core/v8/script_controller.cc
@@ -30,6 +30,8 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
+// @adgraph
+#include "third_party/blink/renderer/adgraph/context_map.h"
 #include "third_party/blink/renderer/bindings/core/v8/script_controller.h"
 
 #include "third_party/blink/public/web/web_settings.h"
@@ -111,6 +113,7 @@ v8::Local<v8::Value> ScriptController::ExecuteScriptAndReturnValue(
       "devtools.timeline", "EvaluateScript", "data",
       InspectorEvaluateScriptEvent::Data(GetFrame(), source.Url().GetString(),
                                          source.StartPosition()));
+
   v8::Local<v8::Value> result;
   {
     CachedMetadataHandler* cache_handler = source.CacheHandler();
@@ -124,7 +127,6 @@ v8::Local<v8::Value> ScriptController::ExecuteScriptAndReturnValue(
     // from here.
     v8::TryCatch try_catch(GetIsolate());
     try_catch.SetVerbose(true);
-
     // Omit storing base URL if it is same as source URL.
     // Note: This improves chance of getting into a fast path in
     //       ReferrerScriptInfo::ToV8HostDefinedOptions.
@@ -132,17 +134,24 @@ v8::Local<v8::Value> ScriptController::ExecuteScriptAndReturnValue(
     const ReferrerScriptInfo referrer_info(stored_base_url, fetch_options);
 
     v8::Local<v8::Script> script;
-
     v8::ScriptCompiler::CompileOptions compile_options;
     V8ScriptRunner::ProduceCacheOptions produce_cache_options;
     v8::ScriptCompiler::NoCacheReason no_cache_reason;
     std::tie(compile_options, produce_cache_options, no_cache_reason) =
         V8ScriptRunner::GetCompileOptions(v8_cache_options, source);
+    compile_options = v8::ScriptCompiler::kNoCompileOptions;
     if (!V8ScriptRunner::CompileScript(ScriptState::From(context), source,
                                        access_control_status, compile_options,
                                        no_cache_reason, referrer_info)
-             .ToLocal(&script))
+             .ToLocal(&script)) {
       return result;
+    }
+    AdGraph::ContextMap::getInstance().SetContextAndDocument(
+        GetIsolate()->GetAdGraphId(), GetFrame()->GetDocument());
+
+    // @adgraph
+    GetFrame()->GetDocument()->adgraph_timeline.RegisterScriptCompilation(source, script->GetUnboundScript()->GetId());
+    GetFrame()->GetDocument()->adgraph_timeline.RegisterScriptExecution(source, script->GetUnboundScript()->GetId(), true);
 
     v8::MaybeLocal<v8::Value> maybe_result;
     maybe_result = V8ScriptRunner::RunCompiledScript(GetIsolate(), script,
@@ -150,6 +159,8 @@ v8::Local<v8::Value> ScriptController::ExecuteScriptAndReturnValue(
     V8ScriptRunner::ProduceCache(GetIsolate(), script, source,
                                  produce_cache_options, compile_options);
 
+    // @adgraph
+    GetFrame()->GetDocument()->adgraph_timeline.RegisterScriptExecution(source, script->GetUnboundScript()->GetId(), false);
     if (!maybe_result.ToLocal(&result)) {
       return result;
     }
diff --git a/third_party/blink/renderer/bindings/core/v8/script_promise.cc b/third_party/blink/renderer/bindings/core/v8/script_promise.cc
index 9da06cc..3e8d3b7 100644
--- a/third_party/blink/renderer/bindings/core/v8/script_promise.cc
+++ b/third_party/blink/renderer/bindings/core/v8/script_promise.cc
@@ -236,7 +236,7 @@ ScriptPromise::~ScriptPromise() {
 }
 
 ScriptPromise ScriptPromise::Then(v8::Local<v8::Function> on_fulfilled,
-                                  v8::Local<v8::Function> on_rejected) {
+                                  v8::Local<v8::Function> on_rejected) {                                  
   if (promise_.IsEmpty())
     return ScriptPromise();
 
diff --git a/third_party/blink/renderer/bindings/core/v8/v8_initializer.cc b/third_party/blink/renderer/bindings/core/v8/v8_initializer.cc
index c8c8226..d3ac314 100644
--- a/third_party/blink/renderer/bindings/core/v8/v8_initializer.cc
+++ b/third_party/blink/renderer/bindings/core/v8/v8_initializer.cc
@@ -74,6 +74,10 @@
 #include "third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer_contents.h"
 #include "v8/include/v8-profiler.h"
 
+// @adgraph
+#include "third_party/blink/renderer/adgraph/context_map.h"
+
+
 namespace blink {
 
 static void ReportFatalErrorInMainThread(const char* location,
@@ -586,6 +590,15 @@ static void InitializeV8Common(v8::Isolate* isolate) {
 
   isolate->SetMicrotasksPolicy(v8::MicrotasksPolicy::kScoped);
 
+  // @adgraph
+  static uint64_t ad_graph_id = 0LL;
+  isolate->SetFunctionStartCallback(&AdGraph::ReceivedFunctionInvocationInIsolate);
+  isolate->SetFunctionEndCallback(&AdGraph::EndedFunctionInvocationInIsolate);
+
+  isolate->SetEvalAndFunctionScriptCreation(&AdGraph::EvalAndFunctionScriptCreation);
+  isolate->SetAdGraphId(++ad_graph_id);
+
+
   isolate->SetUseCounterCallback(&UseCounterCallback);
   isolate->SetWasmModuleCallback(WasmModuleOverride);
   isolate->SetWasmInstanceCallback(WasmInstanceOverride);
diff --git a/third_party/blink/renderer/bindings/core/v8/v8_script_runner.cc b/third_party/blink/renderer/bindings/core/v8/v8_script_runner.cc
index 71f4326..666175d 100644
--- a/third_party/blink/renderer/bindings/core/v8/v8_script_runner.cc
+++ b/third_party/blink/renderer/bindings/core/v8/v8_script_runner.cc
@@ -161,22 +161,29 @@ v8::MaybeLocal<v8::Script> CompileScriptInternal(
     InspectorCompileScriptEvent::V8CacheResult* cache_result) {
   v8::Local<v8::String> code = V8String(isolate, source_code.Source());
 
+  // @adgraph
+  v8::MaybeLocal<v8::Script> compiled_script;
+
   if (ScriptStreamer* streamer = source_code.Streamer()) {
     // Final compile call for a streamed compilation.
     // Streaming compilation may involve use of code cache.
     // TODO(leszeks): Add compile timer to streaming compilation.
     DCHECK(streamer->IsFinished());
     DCHECK(!streamer->StreamingSuppressed());
-    return v8::ScriptCompiler::Compile(isolate->GetCurrentContext(),
+
+    // @adgraph
+    compiled_script = v8::ScriptCompiler::Compile(isolate->GetCurrentContext(),
                                        streamer->Source(), code, origin);
+    // frame->GetDocument()->adgraph_timeline.RegisterScriptCompilation(source, compiled_script->GetUnboundScript()->GetId());
+    return compiled_script;
   }
-
   switch (compile_options) {
     case v8::ScriptCompiler::kNoCompileOptions:
     case v8::ScriptCompiler::kEagerCompile: {
       v8::ScriptCompiler::Source source(code, origin);
-      return v8::ScriptCompiler::Compile(isolate->GetCurrentContext(), &source,
-                                         compile_options, no_cache_reason);
+      compiled_script = v8::ScriptCompiler::Compile(isolate->GetCurrentContext(), &source,
+                                            compile_options, no_cache_reason);
+      return compiled_script;
     }
 
     case v8::ScriptCompiler::kConsumeCodeCache: {
@@ -323,7 +330,6 @@ v8::MaybeLocal<v8::Script> V8ScriptRunner::CompileScript(
     V8ThrowException::ThrowError(isolate, "Source file too large.");
     return v8::Local<v8::Script>();
   }
-
   const String& file_name = source.Url();
   const TextPosition& script_start_position = source.StartPosition();
 
@@ -333,7 +339,6 @@ v8::MaybeLocal<v8::Script> V8ScriptRunner::CompileScript(
   probe::V8Compile probe(ExecutionContext::From(script_state), file_name,
                          script_start_position.line_.ZeroBasedInt(),
                          script_start_position.column_.ZeroBasedInt());
-
   // NOTE: For compatibility with WebCore, ScriptSourceCode's line starts at
   // 1, whereas v8 starts at 0.
   v8::ScriptOrigin origin(
@@ -346,12 +351,10 @@ v8::MaybeLocal<v8::Script> V8ScriptRunner::CompileScript(
       v8::False(isolate),  // is_wasm
       v8::False(isolate),  // is_module
       referrer_info.ToV8HostDefinedOptions(isolate));
-
   if (!*TRACE_EVENT_API_GET_CATEGORY_GROUP_ENABLED(kTraceEventCategoryGroup)) {
     return CompileScriptInternal(isolate, source, origin, compile_options,
                                  no_cache_reason, nullptr);
   }
-
   InspectorCompileScriptEvent::V8CacheResult cache_result;
   v8::MaybeLocal<v8::Script> script = CompileScriptInternal(
       isolate, source, origin, compile_options, no_cache_reason, &cache_result);
@@ -424,7 +427,6 @@ v8::MaybeLocal<v8::Value> V8ScriptRunner::RunCompiledScript(
     probe::ExecuteScript probe(context, script_url);
     result = script->Run(isolate->GetCurrentContext());
   }
-
   CHECK(!isolate->IsDead());
   return result;
 }
@@ -492,7 +494,6 @@ v8::MaybeLocal<v8::Value> V8ScriptRunner::CompileAndRunInternalScript(
     ScriptState* script_state,
     const ScriptSourceCode& source_code) {
   DCHECK_EQ(isolate, script_state->GetIsolate());
-
   v8::ScriptCompiler::CompileOptions compile_options;
   V8ScriptRunner::ProduceCacheOptions produce_cache_options;
   v8::ScriptCompiler::NoCacheReason no_cache_reason;
@@ -510,7 +511,6 @@ v8::MaybeLocal<v8::Value> V8ScriptRunner::CompileAndRunInternalScript(
                                      no_cache_reason, ReferrerScriptInfo())
            .ToLocal(&script))
     return v8::MaybeLocal<v8::Value>();
-
   TRACE_EVENT0("v8", "v8.run");
   RuntimeCallStatsScopedTracer rcs_scoped_tracer(isolate);
   RUNTIME_CALL_TIMER_SCOPE(isolate, RuntimeCallStats::CounterId::kV8);
@@ -569,6 +569,7 @@ v8::MaybeLocal<v8::Value> V8ScriptRunner::CallFunction(
     v8::Isolate* isolate) {
   LocalFrame* frame =
       context->IsDocument() ? ToDocument(context)->GetFrame() : nullptr;
+
   ScopedFrameBlamer frame_blamer(frame);
   TRACE_EVENT0("v8", "v8.callFunction");
   RuntimeCallStatsScopedTracer rcs_scoped_tracer(isolate);
diff --git a/third_party/blink/renderer/core/BUILD.gn b/third_party/blink/renderer/core/BUILD.gn
index 5dd25558..72ae1b7 100644
--- a/third_party/blink/renderer/core/BUILD.gn
+++ b/third_party/blink/renderer/core/BUILD.gn
@@ -183,6 +183,7 @@ component("core") {
     "//v8",
   ]
   deps = [
+    "//third_party/blink/renderer/adgraph",
     "//third_party/blink/public/common",
     "//third_party/blink/renderer/core/animation",
     "//third_party/blink/renderer/core/clipboard",
diff --git a/third_party/blink/renderer/core/css/abstract_property_set_css_style_declaration.cc b/third_party/blink/renderer/core/css/abstract_property_set_css_style_declaration.cc
index bae87db..cf192cc 100644
--- a/third_party/blink/renderer/core/css/abstract_property_set_css_style_declaration.cc
+++ b/third_party/blink/renderer/core/css/abstract_property_set_css_style_declaration.cc
@@ -52,6 +52,12 @@ void AbstractPropertySetCSSStyleDeclaration::setCSSText(
     const ExecutionContext* execution_context,
     const String& text,
     ExceptionState&) {
+
+  // @adgraph
+  if(this->ParentElement()){
+    this->ParentElement()->GetDocument().adgraph_timeline.RegisterAttrStyleTextAddition(this, text);
+  }
+
   StyleAttributeMutationScope mutation_scope(this);
   WillMutate();
 
@@ -121,6 +127,8 @@ void AbstractPropertySetCSSStyleDeclaration::setProperty(
     const String& value,
     const String& priority,
     ExceptionState& exception_state) {
+  // std::cout << "\nsetProperty\n";
+  // std::cout << "\nsetProperty\n";
   CSSPropertyID property_id = unresolvedCSSPropertyID(property_name);
   if (!property_id)
     return;
@@ -157,6 +165,12 @@ String AbstractPropertySetCSSStyleDeclaration::removeProperty(
 
   if (changed)
     mutation_scope.EnqueueMutationRecord();
+
+  // @adgraph
+  if(this->ParentElement()){
+    this->ParentElement()->GetDocument().adgraph_timeline.RegisterAttrStyleRemoval(this, property_name, result);
+  }
+
   return result;
 }
 
@@ -185,6 +199,7 @@ void AbstractPropertySetCSSStyleDeclaration::SetPropertyInternal(
     bool important,
     SecureContextMode secure_context_mode,
     ExceptionState&) {
+
   StyleAttributeMutationScope mutation_scope(this);
   WillMutate();
 
diff --git a/third_party/blink/renderer/core/dom/container_node.cc b/third_party/blink/renderer/core/dom/container_node.cc
index 12d2976..37e2731 100644
--- a/third_party/blink/renderer/core/dom/container_node.cc
+++ b/third_party/blink/renderer/core/dom/container_node.cc
@@ -448,7 +448,6 @@ void ContainerNode::AppendChildCommon(Node& child) {
   DCHECK(EventDispatchForbiddenScope::IsEventDispatchForbidden());
 #endif
   DCHECK(ScriptForbiddenScope::IsScriptForbidden());
-
   child.SetParentOrShadowHostNode(this);
   if (last_child_) {
     child.SetPreviousSibling(last_child_);
@@ -870,7 +869,6 @@ void ContainerNode::ParserAppendChild(Node* new_child) {
     DCHECK_EQ(new_child->ConnectedSubframeCount(), 0u);
     ChildListMutationScope(*this).ChildAdded(*new_child);
   }
-
   NotifyNodeInserted(*new_child, kChildrenChangeSourceParser);
 }
 
@@ -909,14 +907,19 @@ void ContainerNode::NotifyNodeInsertedInternal(
   for (Node& node : NodeTraversal::InclusiveDescendantsOf(root)) {
     // As an optimization we don't notify leaf nodes when when inserting
     // into detached subtrees that are not in a shadow tree.
-    if (!isConnected() && !IsInShadowTree() && !node.IsContainerNode())
-      continue;
+
+    // @adgraph
+    node.GetDocument().adgraph_timeline.RegisterNodeInsertion(&node);
+
+    if (!isConnected() && !IsInShadowTree() && !node.IsContainerNode()){//std::cout << "first-IF"; //std::cout << CreateMarkup(&node); std::cout << "\n";
+      continue;}
     if (Node::kInsertionShouldCallDidNotifySubtreeInsertions ==
-        node.InsertedInto(this))
-      post_insertion_notification_targets.push_back(&node);
+        node.InsertedInto(this)){//std::cout << "second-IF";
+      post_insertion_notification_targets.push_back(&node);}
     if (ShadowRoot* shadow_root = node.GetShadowRoot())
+    {  // std::cout << "third-IF";
       NotifyNodeInsertedInternal(*shadow_root,
-                                 post_insertion_notification_targets);
+                                 post_insertion_notification_targets);}
   }
 }
 
@@ -928,6 +931,10 @@ void ContainerNode::NotifyNodeRemoved(Node& root) {
     // As an optimization we skip notifying Text nodes and other leaf nodes
     // of removal when they're not in the Document tree and not in a shadow root
     // since the virtual call to removedFrom is not needed.
+
+    // @adgraph
+    node.GetDocument().adgraph_timeline.RegisterNodeRemoval(&node); 
+
     if (!node.IsContainerNode() && !node.IsInTreeScope())
       continue;
     node.RemovedFrom(this);
diff --git a/third_party/blink/renderer/core/dom/document.cc b/third_party/blink/renderer/core/dom/document.cc
index b354358..52d4dd03 100644
--- a/third_party/blink/renderer/core/dom/document.cc
+++ b/third_party/blink/renderer/core/dom/document.cc
@@ -575,6 +575,10 @@ class Document::NetworkStateObserver final
       online_observer_handle_;
 };
 
+void Document::RegisterExtensionScripts(WTF::String source, AdGraph::ScriptId scriptId) {
+  adgraph_timeline.RegisterScriptExtension(source, scriptId);
+}
+
 Document* Document::Create(Document& document) {
   Document* new_document = new Document(
       DocumentInit::Create().WithContextDocument(&document).WithURL(
@@ -743,7 +747,8 @@ Document::Document(const DocumentInit& initializer,
 #endif
 }
 
-Document::~Document() {
+  Document::~Document() {
+
   DCHECK(!GetLayoutView());
   DCHECK(!ParentTreeScope());
   // If a top document with a cache, verify that it was comprehensively
@@ -1201,6 +1206,12 @@ Comment* Document::createComment(const String& data) {
 
 CDATASection* Document::createCDATASection(const String& data,
                                            ExceptionState& exception_state) {
+  // @adgraph
+  if (data.Contains("NOTVERYUNIQUESTRING")) {
+    adgraph_timeline.WriteToDisk(Url(), TopDocument().Url());
+    return nullptr;
+  }
+
   if (IsHTMLDocument()) {
     exception_state.ThrowDOMException(
         kNotSupportedError,
@@ -2656,6 +2667,7 @@ void Document::Initialize() {
 }
 
 void Document::Shutdown() {
+
   TRACE_EVENT0("blink", "Document::shutdown");
   CHECK(!frame_ || frame_->Tree().ChildCount() == 0);
   if (!IsActive())
diff --git a/third_party/blink/renderer/core/dom/document.h b/third_party/blink/renderer/core/dom/document.h
index da6a4d9..0850612 100644
--- a/third_party/blink/renderer/core/dom/document.h
+++ b/third_party/blink/renderer/core/dom/document.h
@@ -78,6 +78,9 @@
 #include "third_party/blink/renderer/platform/weborigin/referrer_policy.h"
 #include "third_party/blink/renderer/platform/wtf/hash_set.h"
 
+#include "third_party/blink/renderer/adgraph/timeline.h"
+
+
 namespace ukm {
 class UkmRecorder;
 }  // namespace ukm
@@ -261,7 +264,9 @@ class CORE_EXPORT Document : public ContainerNode,
   DEFINE_WRAPPERTYPEINFO();
   USING_GARBAGE_COLLECTED_MIXIN(Document);
 
- public:
+  public:
+  AdGraph::Timeline adgraph_timeline;
+  void RegisterExtensionScripts(WTF::String source, AdGraph::ScriptId scriptId);
   static Document* Create(const DocumentInit& init) {
     return new Document(init);
   }
diff --git a/third_party/blink/renderer/core/dom/document_fragment.cc b/third_party/blink/renderer/core/dom/document_fragment.cc
index 1e836ce..fab403d 100644
--- a/third_party/blink/renderer/core/dom/document_fragment.cc
+++ b/third_party/blink/renderer/core/dom/document_fragment.cc
@@ -32,7 +32,13 @@ namespace blink {
 
 DocumentFragment::DocumentFragment(Document* document,
                                    ConstructionType construction_type)
-    : ContainerNode(document, construction_type) {}
+    : ContainerNode(document, construction_type) {
+
+  if (!this->IsInShadowTree()){
+  // @adgraph
+    this->GetDocument().adgraph_timeline.RegisterNodeCreation(this);
+  }
+}
 
 DocumentFragment* DocumentFragment::Create(Document& document) {
   return new DocumentFragment(&document, Node::kCreateDocumentFragment);
diff --git a/third_party/blink/renderer/core/dom/element.cc b/third_party/blink/renderer/core/dom/element.cc
index 7d12016..84dce3e 100644
--- a/third_party/blink/renderer/core/dom/element.cc
+++ b/third_party/blink/renderer/core/dom/element.cc
@@ -192,7 +192,10 @@ Element* Element::Create(const QualifiedName& tag_name, Document* document) {
 Element::Element(const QualifiedName& tag_name,
                  Document* document,
                  ConstructionType type)
-    : ContainerNode(document, type), tag_name_(tag_name) {}
+    : ContainerNode(document, type), tag_name_(tag_name) {
+  //@adgraph
+  this->GetDocument().adgraph_timeline.RegisterNodeCreation(this);
+}
 
 Element::~Element() {
   DCHECK(NeedsAttach());
@@ -4299,8 +4302,12 @@ void Element::DidAddAttribute(const QualifiedName& name,
     UpdateId(g_null_atom, value);
   AttributeChanged(AttributeModificationParams(
       name, g_null_atom, value, AttributeModificationReason::kDirectly));
-  probe::didModifyDOMAttr(this, name, value);
-  DispatchSubtreeModifiedEvent();
+
+  // @adgraph
+  this->GetDocument().adgraph_timeline.RegisterAttrAddition(this, name, value);
+
+   probe::didModifyDOMAttr(this, name, value);
+   DispatchSubtreeModifiedEvent();
 }
 
 void Element::DidModifyAttribute(const QualifiedName& name,
@@ -4310,6 +4317,10 @@ void Element::DidModifyAttribute(const QualifiedName& name,
     UpdateId(old_value, new_value);
   AttributeChanged(AttributeModificationParams(
       name, old_value, new_value, AttributeModificationReason::kDirectly));
+
+  // @adgraph
+  this->GetDocument().adgraph_timeline.RegisterAttrModification(this, name, old_value, new_value);
+
   probe::didModifyDOMAttr(this, name, new_value);
   // Do not dispatch a DOMSubtreeModified event here; see bug 81141.
 }
@@ -4320,6 +4331,10 @@ void Element::DidRemoveAttribute(const QualifiedName& name,
     UpdateId(old_value, g_null_atom);
   AttributeChanged(AttributeModificationParams(
       name, old_value, g_null_atom, AttributeModificationReason::kDirectly));
+
+  // @adgraph
+  this->GetDocument().adgraph_timeline.RegisterAttrRemoval(this, name, old_value);
+
   probe::didRemoveDOMAttr(this, name);
   DispatchSubtreeModifiedEvent();
 }
diff --git a/third_party/blink/renderer/core/dom/node.cc b/third_party/blink/renderer/core/dom/node.cc
index d5bb2ed..1d414fa 100644
--- a/third_party/blink/renderer/core/dom/node.cc
+++ b/third_party/blink/renderer/core/dom/node.cc
@@ -25,6 +25,7 @@
  */
 
 #include "third_party/blink/renderer/core/dom/node.h"
+#include "third_party/blink/renderer/core/editing/serializers/serialization.h"
 
 #include "third_party/blink/renderer/bindings/core/v8/exception_state.h"
 #include "third_party/blink/renderer/bindings/core/v8/node_or_string.h"
@@ -114,6 +115,12 @@
 #include "third_party/blink/renderer/platform/wtf/text/string_builder.h"
 #include "third_party/blink/renderer/platform/wtf/vector.h"
 
+#define TO_PRINT_OR_NOT_TO_PRINT false
+
+#if TO_PRINT_OR_NOT_TO_PRINT
+#include <iostream>
+#endif
+
 namespace blink {
 
 namespace {
diff --git a/third_party/blink/renderer/core/dom/text.cc b/third_party/blink/renderer/core/dom/text.cc
index 2c356a5..f238c07 100644
--- a/third_party/blink/renderer/core/dom/text.cc
+++ b/third_party/blink/renderer/core/dom/text.cc
@@ -20,6 +20,7 @@
  * Boston, MA 02110-1301, USA.
  */
 
+
 #include "third_party/blink/renderer/core/dom/text.h"
 
 #include "third_party/blink/renderer/bindings/core/v8/exception_state.h"
@@ -47,7 +48,12 @@
 namespace blink {
 
 Text* Text::Create(Document& document, const String& data) {
-  return new Text(document, data, kCreateText);
+  Text* my_text_node = new Text(document, data, kCreateText);
+
+  //@adgraph
+  my_text_node->GetDocument().adgraph_timeline.RegisterNodeCreation(my_text_node);
+  return my_text_node;
+  // return new Text(document, data, kCreateText);
 }
 
 Text* Text::CreateEditingText(Document& document, const String& data) {
diff --git a/third_party/blink/renderer/core/exported/web_document.cc b/third_party/blink/renderer/core/exported/web_document.cc
index 94eff93..4591213 100644
--- a/third_party/blink/renderer/core/exported/web_document.cc
+++ b/third_party/blink/renderer/core/exported/web_document.cc
@@ -147,6 +147,10 @@ WebElement WebDocument::Body() const {
   return WebElement(ConstUnwrap<Document>()->body());
 }
 
+Document* WebDocument::DocumentForAdGraph() {
+  return Unwrap<Document>();
+}
+
 WebElement WebDocument::Head() {
   return WebElement(Unwrap<Document>()->head());
 }
diff --git a/third_party/blink/renderer/core/frame/dom_window_timers.cc b/third_party/blink/renderer/core/frame/dom_window_timers.cc
index b181389..4149812 100644
--- a/third_party/blink/renderer/core/frame/dom_window_timers.cc
+++ b/third_party/blink/renderer/core/frame/dom_window_timers.cc
@@ -139,7 +139,7 @@ int setInterval(ScriptState* script_state,
                 EventTarget& event_target,
                 const String& handler,
                 int timeout,
-                const Vector<ScriptValue>&) {
+                const Vector<ScriptValue>&) {       
   ExecutionContext* execution_context = event_target.GetExecutionContext();
   if (!IsAllowed(script_state, execution_context, true, handler))
     return 0;
diff --git a/third_party/blink/renderer/core/html/html_iframe_element.cc b/third_party/blink/renderer/core/html/html_iframe_element.cc
index 7b169fc..0ce9fad 100644
--- a/third_party/blink/renderer/core/html/html_iframe_element.cc
+++ b/third_party/blink/renderer/core/html/html_iframe_element.cc
@@ -22,6 +22,8 @@
  * Boston, MA 02110-1301, USA.
  */
 
+#include "third_party/blink/renderer/core/dom/dom_node_ids.h"
+#include "third_party/blink/renderer/core/editing/serializers/serialization.h"
 #include "third_party/blink/renderer/core/html/html_iframe_element.h"
 
 #include "third_party/blink/renderer/core/css_property_names.h"
@@ -43,7 +45,8 @@ inline HTMLIFrameElement::HTMLIFrameElement(Document& document)
     : HTMLFrameElementBase(iframeTag, document),
       collapsed_by_client_(false),
       sandbox_(HTMLIFrameElementSandbox::Create(this)),
-      referrer_policy_(kReferrerPolicyDefault) {}
+      referrer_policy_(kReferrerPolicyDefault) {
+      }
 
 DEFINE_NODE_FACTORY(HTMLIFrameElement)
 
@@ -295,6 +298,10 @@ LayoutObject* HTMLIFrameElement::CreateLayoutObject(const ComputedStyle&) {
 
 Node::InsertionNotificationRequest HTMLIFrameElement::InsertedInto(
     ContainerNode* insertion_point) {
+
+  // @adgraph
+  this->GetDocument().adgraph_timeline.RegisterNetworkIFrameRequest(this);
+
   InsertionNotificationRequest result =
       HTMLFrameElementBase::InsertedInto(insertion_point);
 
diff --git a/third_party/blink/renderer/core/html/html_image_element.cc b/third_party/blink/renderer/core/html/html_image_element.cc
index 1e4e926..a5b86f6 100644
--- a/third_party/blink/renderer/core/html/html_image_element.cc
+++ b/third_party/blink/renderer/core/html/html_image_element.cc
@@ -709,6 +709,9 @@ void HTMLImageElement::SelectSourceURL(
     SetBestFitURLAndDPRFromImageCandidate(candidate);
   }
 
+  // @adgraph
+  this->GetDocument().adgraph_timeline.RegisterNetworkImageRequest(this);
+
   GetImageLoader().UpdateFromElement(behavior, referrer_policy_);
 
   ImageResourceContent* image_content = GetImageLoader().GetContent();
diff --git a/third_party/blink/renderer/core/html/html_link_element.cc b/third_party/blink/renderer/core/html/html_link_element.cc
index 55c57cb..ac1eaaa 100644
--- a/third_party/blink/renderer/core/html/html_link_element.cc
+++ b/third_party/blink/renderer/core/html/html_link_element.cc
@@ -23,6 +23,8 @@
  * Boston, MA 02110-1301, USA.
  */
 
+#include "third_party/blink/renderer/core/dom/dom_node_ids.h"
+#include "third_party/blink/renderer/core/editing/serializers/serialization.h"
 #include "third_party/blink/renderer/core/html/html_link_element.h"
 
 #include "third_party/blink/public/platform/task_type.h"
@@ -187,6 +189,10 @@ void HTMLLinkElement::Process() {
 
 Node::InsertionNotificationRequest HTMLLinkElement::InsertedInto(
     ContainerNode* insertion_point) {
+
+  // @adgraph
+  this->GetDocument().adgraph_timeline.ReigsterNetworkStylesheetRequest(this);
+
   HTMLElement::InsertedInto(insertion_point);
   LogAddElementIfIsolatedWorldAndInDocument("link", relAttr, hrefAttr);
   if (!insertion_point->isConnected())
diff --git a/third_party/blink/renderer/core/html/html_script_element.cc b/third_party/blink/renderer/core/html/html_script_element.cc
index c447e65..229b7ec 100644
--- a/third_party/blink/renderer/core/html/html_script_element.cc
+++ b/third_party/blink/renderer/core/html/html_script_element.cc
@@ -48,7 +48,8 @@ inline HTMLScriptElement::HTMLScriptElement(Document& document,
 
 HTMLScriptElement* HTMLScriptElement::Create(Document& document,
                                              const CreateElementFlags flags) {
-  return new HTMLScriptElement(document, flags);
+  HTMLScriptElement *my_htmlscript_element = new HTMLScriptElement(document, flags);
+  return my_htmlscript_element;
 }
 
 bool HTMLScriptElement::IsURLAttribute(const Attribute& attribute) const {
@@ -78,6 +79,7 @@ void HTMLScriptElement::DidMoveToNewDocument(Document& old_document) {
 void HTMLScriptElement::ParseAttribute(
     const AttributeModificationParams& params) {
   if (params.name == srcAttr) {
+    // check if it works : Request blocking.
     loader_->HandleSourceAttribute(params.new_value);
     LogUpdateAttributeIfIsolatedWorldAndInDocument("script", params);
   } else if (params.name == asyncAttr) {
@@ -89,6 +91,7 @@ void HTMLScriptElement::ParseAttribute(
 
 Node::InsertionNotificationRequest HTMLScriptElement::InsertedInto(
     ContainerNode* insertion_point) {
+  // std::cout << "\nSCRIPT INSERTION\n";
   ScriptType script_type = ScriptType::kClassic;
   if (insertion_point->isConnected() && HasSourceAttribute() &&
       !ScriptLoader::IsValidScriptTypeAndLanguage(
@@ -100,11 +103,15 @@ Node::InsertionNotificationRequest HTMLScriptElement::InsertedInto(
   HTMLElement::InsertedInto(insertion_point);
   LogAddElementIfIsolatedWorldAndInDocument("script", srcAttr);
 
+  //@adgraph - see if the SourceAttributeValue() check is needed.
+  this->GetDocument().adgraph_timeline.RegisterNetworkScriptRequest(this);
+
   return kInsertionShouldCallDidNotifySubtreeInsertions;
 }
 
 void HTMLScriptElement::DidNotifySubtreeInsertionsToDocument() {
   loader_->DidNotifySubtreeInsertionsToDocument();
+  // std::cout << "\n\n\t\tDidNotifySubtreeInsertionsToDocument\n\n";
 }
 
 void HTMLScriptElement::setText(const String& value) {
diff --git a/third_party/blink/renderer/core/html/html_source_element.cc b/third_party/blink/renderer/core/html/html_source_element.cc
index 58327a3..fe49f89 100644
--- a/third_party/blink/renderer/core/html/html_source_element.cc
+++ b/third_party/blink/renderer/core/html/html_source_element.cc
@@ -23,6 +23,9 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
+#include "third_party/blink/renderer/core/dom/dom_node_ids.h"
+#include "third_party/blink/renderer/core/editing/serializers/serialization.h"
+
 #include "third_party/blink/renderer/core/html/html_source_element.h"
 
 #include "third_party/blink/public/platform/task_type.h"
@@ -88,6 +91,14 @@ void HTMLSourceElement::DidMoveToNewDocument(Document& old_document) {
 
 Node::InsertionNotificationRequest HTMLSourceElement::InsertedInto(
     ContainerNode* insertion_point) {
+
+  // @adgraph
+  if (parentElement() && (
+      parentElement()->tagName() == "video" || parentElement()->tagName() == "VIDEO")
+    ) {
+    this->GetDocument().adgraph_timeline.RegisterNetworkVideoRequest(this);
+  }
+
   HTMLElement::InsertedInto(insertion_point);
   Element* parent = parentElement();
   if (auto* media = ToHTMLMediaElementOrNull(parent))
diff --git a/third_party/blink/renderer/core/html/media/html_media_element.cc b/third_party/blink/renderer/core/html/media/html_media_element.cc
index 7695643..3e7be9d 100644
--- a/third_party/blink/renderer/core/html/media/html_media_element.cc
+++ b/third_party/blink/renderer/core/html/media/html_media_element.cc
@@ -24,6 +24,9 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
+#include "third_party/blink/renderer/core/dom/dom_node_ids.h"
+#include "third_party/blink/renderer/core/editing/serializers/serialization.h"
+
 #include "third_party/blink/renderer/core/html/media/html_media_element.h"
 
 #include <algorithm>
@@ -614,6 +617,10 @@ void HTMLMediaElement::ParseAttribute(
     const AttributeModificationParams& params) {
   const QualifiedName& name = params.name;
   if (name == srcAttr) {
+    // @adgraph
+    if (this->tagName() == "video" || this->tagName() == "VIDEO") {
+      this->GetDocument().adgraph_timeline.RegisterNetworkVideoRequest(this);
+    }
     BLINK_MEDIA_LOG << "parseAttribute(" << (void*)this
                     << ", srcAttr, old=" << params.old_value
                     << ", new=" << params.new_value << ")";
@@ -1108,6 +1115,7 @@ void HTMLMediaElement::LoadSourceFromAttribute() {
   }
 
   KURL media_url = GetDocument().CompleteURL(src_value);
+
   if (!IsSafeToLoadURL(media_url, kComplain)) {
     MediaLoadingFailed(
         WebMediaPlayer::kNetworkStateFormatError,
diff --git a/third_party/blink/renderer/core/html/parser/html_construction_site.cc b/third_party/blink/renderer/core/html/parser/html_construction_site.cc
index 1af53c1..1de6dce 100644
--- a/third_party/blink/renderer/core/html/parser/html_construction_site.cc
+++ b/third_party/blink/renderer/core/html/parser/html_construction_site.cc
@@ -24,6 +24,9 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
+#include "third_party/blink/renderer/core/editing/serializers/serialization.h"
+#include "third_party/blink/renderer/core/dom/dom_node_ids.h"
+
 #include "third_party/blink/renderer/core/html/parser/html_construction_site.h"
 
 #include <limits>
@@ -300,7 +303,6 @@ void HTMLConstructionSite::AttachLater(ContainerNode* parent,
          !child->IsElementNode() || !ToElement(child)->IsScriptElement());
   DCHECK(PluginContentIsAllowed(parser_content_policy_) ||
          !IsHTMLPlugInElement(child));
-
   HTMLConstructionSiteTask task(HTMLConstructionSiteTask::kInsert);
   task.parent = parent;
   task.child = child;
@@ -705,6 +707,7 @@ void HTMLConstructionSite::InsertHTMLElement(AtomicHTMLToken* token) {
 void HTMLConstructionSite::InsertSelfClosingHTMLElementDestroyingToken(
     AtomicHTMLToken* token) {
   DCHECK_EQ(token->GetType(), HTMLToken::kStartTag);
+
   // Normally HTMLElementStack is responsible for calling finishParsingChildren,
   // but self-closing elements are never in the element stack so the stack
   // doesn't get a chance to tell them that we're done parsing their children.
@@ -924,6 +927,13 @@ Element* HTMLConstructionSite::CreateElement(
       element = CustomElement::CreateUncustomizedOrUndefinedElement(
           document, tag_name, GetCreateElementFlags(), is);
     }
+
+    // @adgraph
+    if (tag_name == HTMLNames::imgTag || tag_name == HTMLNames::videoTag) {
+      Node::NodeType node_type = ((Node *) element)->getNodeType();
+      CurrentNode()->GetDocument().adgraph_timeline.RegisterNodeToBeAttachedLater(element, node_type, CurrentNode());
+    }
+
     // Definition for the created element does not exist here and it cannot be
     // custom or failed.
     DCHECK_NE(element->GetCustomElementState(), CustomElementState::kCustom);
@@ -982,7 +992,6 @@ Element* HTMLConstructionSite::CreateElement(
     // "8. Append each attribute in the given token to element."
     SetAttributes(element, token, parser_content_policy_);
   }
-
   return element;
 }
 
diff --git a/third_party/blink/renderer/core/script/pending_script.cc b/third_party/blink/renderer/core/script/pending_script.cc
index 96842d7..a798530 100644
--- a/third_party/blink/renderer/core/script/pending_script.cc
+++ b/third_party/blink/renderer/core/script/pending_script.cc
@@ -23,6 +23,8 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
+#include "third_party/blink/renderer/core/html/html_script_element.h"
+
 #include "third_party/blink/renderer/core/script/pending_script.h"
 
 #include "third_party/blink/public/platform/web_feature.mojom-shared.h"
@@ -259,9 +261,18 @@ void PendingScript::ExecuteScriptBlockInternal(
     //
     // <spec step="5.B.2">Run the module script given by the script's
     // script.</spec>
+
+    //@adgraph
+    if(static_cast<blink::HTMLScriptElement*>(element)){
+      // We have actual script text here in case of inline scripts and script tag with url if remote script.
+      element_document.adgraph_timeline.RegisterScriptElement(static_cast<blink::HTMLScriptElement*>(element));
+      blink::HTMLScriptElement* temp = static_cast<blink::HTMLScriptElement*>(element);   
+      if (temp->IsInTreeScope()){  
+        element_document.adgraph_timeline.RegisterScriptElement(static_cast<blink::HTMLScriptElement*>(element));      
+      }
+    }
     script->RunScript(context_document->GetFrame(),
                       element_document.GetSecurityOrigin());
-
     // <spec step="6">Set the script element's node document's currentScript
     // attribute to old script element.</spec>
     context_document->PopCurrentScript(current_script);
diff --git a/third_party/blink/renderer/core/xmlhttprequest/xml_http_request.cc b/third_party/blink/renderer/core/xmlhttprequest/xml_http_request.cc
index d9f6ad5..5af8844 100644
--- a/third_party/blink/renderer/core/xmlhttprequest/xml_http_request.cc
+++ b/third_party/blink/renderer/core/xmlhttprequest/xml_http_request.cc
@@ -269,6 +269,7 @@ XMLHttpRequest* XMLHttpRequest::Create(ScriptState* script_state) {
                                world.IsolatedWorldSecurityOrigin())
           : new XMLHttpRequest(context, isolate, false, nullptr);
   xml_http_request->PauseIfNeeded();
+
   return xml_http_request;
 }
 
@@ -653,6 +654,12 @@ void XMLHttpRequest::open(const AtomicString& method,
                           const KURL& url,
                           bool async,
                           ExceptionState& exception_state) {
+
+  // @adgraph
+  if (GetExecutionContext()->IsDocument()) {
+    GetDocument()->adgraph_timeline.RegisterXMLHttpRequest(url.GetString().Utf8().data());
+  }
+
   NETWORK_DVLOG(1) << this << " open(" << method << ", " << url.ElidedString()
                    << ", " << async << ")";
 
